openapi: 3.0.3
info:
  title: selc-ms-core
  version: 1.0-SNAPSHOT
servers:
  - url: '/ms-core/{{version}}'
tags:
  - name: External
    description: External Controller
  - name: Institution
    description: Institution Controller
  - name: Onboarding
    description: Onboarding Controller
  - name: Persons
    description: User Controller
  - name: Token
    description: Token Controller
paths:
  /external/institutions/{externalId}:
    get:
      tags:
        - External
      summary: Gets institution using external institution id
      description: Gets institution using external institution id
      operationId: getByExternalIdUsingGET
      parameters:
        - name: externalId
          in: path
          description: Institution's unique external identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /external/institutions/{externalId}/geotaxonomies:
    get:
      tags:
        - External
      summary: retrieves the geographic taxonomies related to Institution.
      description: retrieves the geographic taxonomies related to Institution.
      operationId: retrieveInstitutionGeoTaxonomiesByExternalIdUsingGET
      parameters:
        - name: externalId
          in: path
          description: externalId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GeographicTaxonomies'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /external/institutions/{externalId}/products:
    get:
      tags:
        - External
      summary: retrieves the products related to Institution
      description: retrieves the products related to Institution
      operationId: retrieveInstitutionProductsByExternalIdUsingGET
      parameters:
        - name: externalId
          in: path
          description: externalId
          required: true
          style: simple
          schema:
            type: string
        - name: states
          in: query
          description: comma separated sequence of states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RelationshipState'
            default: [ ]
          explode: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardedProducts'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /external/institutions/{externalId}/products/{productId}/billing:
    get:
      tags:
        - External
      summary: retrieves the billing data related to the institution even if the current user is not related to the institution/product
      description: retrieves the billing data related to the institution even if the current user is not related to the institution/product
      operationId: getBillingInstitutionByExternalIdUsingGET
      parameters:
        - name: externalId
          in: path
          description: Institution's unique external identifier
          required: true
          style: simple
          schema:
            type: string
        - name: productId
          in: path
          description: Product's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionBillingResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /external/institutions/{externalId}/products/{productId}/manager:
    get:
      tags:
        - External
      summary: retrieves the manager related to the institution even if the current user is not related to the institution/product
      description: retrieves the manager related to the institution even if the current user is not related to the institution/product
      operationId: getManagerInstitutionByExternalIdUsingGET
      parameters:
        - name: externalId
          in: path
          description: Institution's unique external identifier
          required: true
          style: simple
          schema:
            type: string
        - name: productId
          in: path
          description: Product's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionManagerResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /external/institutions/{externalId}/relationships:
    get:
      tags:
        - External
      summary: returns the relationships related to the institution
      description: returns the relationships related to the institution
      operationId: getUserInstitutionRelationshipsByExternalIdUsingGET
      parameters:
        - name: externalId
          in: path
          description: The external identifier of the institution
          required: true
          schema:
            type: string
        - in: query
          name: personId
          description: the person identifier
          schema:
            type: string
            format: uuid
        - in: query
          name: roles
          description: comma separated sequence of role to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PartyRole'
            default: [ ]
          explode: false
        - in: query
          name: states
          description: comma separated sequence of states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RelationshipState'
            default: [ ]
          explode: false
        - in: query
          name: products
          description: comma separated sequence of products to filter the response with
          schema:
            type: array
            items:
              type: string
            default: [ ]
          explode: false
        - in: query
          name: productRoles
          description: comma separated sequence of product roles to filter the response with
          schema:
            type: array
            items:
              type: string
            default: [ ]
          explode: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /institutions/insert/{externalId}:
    post:
      tags:
        - Institution
      summary: create an institution using external institution id without fetching data from party-registry or info-camere
      description: create an institution using external institution id without fetching data from party-registry or info-camere
      operationId: createInstitutionRawUsingPOST
      parameters:
        - name: externalId
          in: path
          description: Institution's unique external identifier
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstitutionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /institutions/pg/{externalId}:
    post:
      tags:
        - Institution
      summary: create an institution (PG) using external institution id fetching data from info-camere
      description: create an institution (PG) using external institution id fetching data from info-camere
      operationId: createPgInstitutionUsingPOST
      parameters:
        - name: externalId
          in: path
          description: Institution's unique external identifier
          required: true
          style: simple
          schema:
            type: string
        - name: existsInRegistry
          in: query
          description: boolean for PG persistence (institution exists in Info Camere or AdE registry
          required: true
          style: form
          schema:
            type: boolean
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /institutions/{externalId}:
    post:
      tags:
        - Institution
      summary: create an institution (PA) using external institution id fetching data from party-registry
      description: create an institution (PA) using external institution id fetching data from party-registry
      operationId: createInstitutionByExternalIdUsingPOST
      parameters:
        - name: externalId
          in: path
          description: Institution's unique external identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /institutions/{id}:
    get:
      tags:
        - Institution
      summary: Gets the corresponding institution using internal institution id
      description: Gets the corresponding institution using internal institution id
      operationId: retrieveInstitutionByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
    put:
      tags:
        - Institution
      summary: Update the corresponding institution searched using internal institution id
      description: Update the corresponding institution searched using internal institution id
      operationId: updateInstitutionUsingPUT
      parameters:
        - name: id
          in: path
          description: Identificativo interno dell'institution
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstitutionPut'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /institutions/{id}/geotaxonomies:
    get:
      tags:
        - Institution
      summary: retrieves the geographic taxonomies this institution is related to
      description: retrieves the geographic taxonomies this institution is related to
      operationId: retrieveInstitutionGeoTaxonomiesUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GeographicTaxonomies'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /institutions/{id}/products:
    get:
      tags:
        - Institution
      summary: retrieves the insistitution's related products.
      description: retrieves the insistitution's related products.
      operationId: retrieveInstitutionProductsUsingGET
      parameters:
        - name: id
          in: path
          description: The internal identifier of the institution
          required: true
          schema:
            type: string
            format: uuid
        - name: states
          in: query
          description: comma separated sequence of states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RelationshipState'
            default: [ ]
          explode: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardedProducts'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /institutions/{id}/relationships:
    get:
      tags:
        - Institution
      summary: returns the relationships related to the institution
      description: returns the relationships related to the institution
      operationId: getUserInstitutionRelationshipsUsingGET
      parameters:
        - name: id
          in: path
          description: The internal identifier of the institution
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: personId
          description: the person identifier
          schema:
            type: string
            format: uuid
        - in: query
          name: roles
          description: comma separated sequence of role to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PartyRole'
            default: [ ]
          explode: false
        - in: query
          name: states
          description: comma separated sequence of states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RelationshipState'
            default: [ ]
          explode: false
        - in: query
          name: products
          description: comma separated sequence of products to filter the response with
          schema:
            type: array
            items:
              type: string
            default: [ ]
          explode: false
        - in: query
          name: productRoles
          description: comma separated sequence of product roles to filter the response with
          schema:
            type: array
            items:
              type: string
            default: [ ]
          explode: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/approve/{tokenId}:
    post:
      tags:
        - Onboarding
      summary: approve an onboarding request by an operator review
      description: approve an onboarding request by an operator review
      operationId: approveOnboardingUsingPOST
      parameters:
        - name: tokenId
          in: path
          description: contract's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/complete/{tokenId}:
    post:
      tags:
        - Onboarding
      summary: complete an onboarding request
      description: complete an onboarding request
      operationId: completeOnboardingUsingPOST
      parameters:
        - name: tokenId
          in: path
          description: contract's unique identifier
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: A E-Service seed
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - contract
              properties:
                contract:
                  type: string
                  format: binary
            encoding:
              contract:
                contentType: application/octet-stream
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
    delete:
      tags:
        - Onboarding
      summary: invalidate an onboarding request
      description: invalidate an onboarding request
      operationId: invalidateOnboardingUsingDELETE
      parameters:
        - name: tokenId
          in: path
          description: tokenId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/info:
    get:
      tags:
        - Onboarding
      summary: returns onboarding info
      description: returns onboarding info
      operationId: onboardingInfoUsingGET
      parameters:
        - name: institutionId
          description: The internal identifier of the institution
          in: query
          schema:
            type: string
            format: uuid
        - name: institutionExternalId
          description: The external Id of an institution you can filter the retrieval with
          in: query
          schema:
            type: string
        - name: states
          in: query
          description: comma separated sequence of states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RelationshipState'
            default: [ ]
          explode: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OnboardingInfoResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/institution:
    post:
      tags:
        - Onboarding
      summary: create a new Token (contract), and update institution and users data
      description: create a new Token (contract), and update institution and users data
      operationId: onboardingInstitutionUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingInstitutionRequest'
      responses:
        '204':
          description: Successfull operation
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/institution/{externalId}/products/{productId}:
    head:
      tags:
        - Onboarding
      summary: verify if onboardedProduct is already onboarded for institution
      description: verify if onboardedProduct is already onboarded for institution
      operationId: verifyOnboardingInfoUsingHEAD
      parameters:
        - name: externalId
          in: path
          description: Institution's unique external identifier
          required: true
          style: simple
          schema:
            type: string
        - name: productId
          in: path
          description: Product's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: Successfull operation
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/legals:
    post:
      tags:
        - Onboarding
      summary: performs legals onboarding on an already existing institution
      description: performs legals onboarding on an already existing institution
      operationId: onboardingInstitutionLegalsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingInstitutionLegalsRequest'
      responses:
        '204':
          description: Successfull operation
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/operators:
    post:
      tags:
        - Onboarding
      summary: performs operators onboarding on an already existing institution
      description: performs operators onboarding on an already existing institution
      operationId: onboardingInstitutionOperatorsUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingInstitutionOperatorsRequest'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/reject/{tokenId}:
    delete:
      tags:
        - Onboarding
      summary: invalidate an onboarding request by an operator review
      description: invalidate an onboarding request by an operator review
      operationId: onboardingRejectUsingDELETE
      parameters:
        - name: tokenId
          in: path
          description: contract's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: Successfull operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OnboardingInfoResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/relationship/{relationshipId}/document:
    get:
      tags:
        - Onboarding
      summary: retrieve the contractDocument related to a relationship
      description: retrieve the contractDocument related to a relationship
      operationId: getOnboardingDocumentUsingGET
      parameters:
        - name: relationshipId
          in: path
          description: relationshipId
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Signed onboarding document retrieved
          content:
            '*/*':
              schema:
                type: string
                format: byte
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /onboarding/subdelegates:
    post:
      tags:
        - Onboarding
      summary: Il servizio persiste nuovi subdelegati per un prodotto e un institution che hanno già effettuato l'onboarding
      description: Il servizio persiste nuovi subdelegati per un prodotto e un institution che hanno già effettuato l'onboarding
      operationId: onboardingInstitutionSubDelegateUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingInstitutionOperatorsRequest'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /tokens/{tokenId}:
    get:
      tags:
        - Token
      summary: retrieve a token relationship
      description: retrieve a token relationship
      operationId: getTokenUsingGET
      parameters:
        - name: tokenId
          in: path
          description: contract's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /tokens/{tokenId}/verify:
    post:
      tags:
        - Token
      summary: verify token status
      description: verify token status
      operationId: verifyTokenUsingPOST
      parameters:
        - name: tokenId
          in: path
          description: contract's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenIdResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /persons:
    post:
      tags:
        - Persons
      summary: create a new person
      description: create a new person
      operationId: createUserUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /persons/{id}:
    head:
      tags:
        - Persons
      summary: verify if a Person exists for a given ID
      description: verify if a Person exists for a given ID
      operationId: verifyUserUsingHEAD
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /relationships/{relationshipId}:
    get:
      tags:
        - Persons
      summary: gets the corresponding relationship
      description: gets the corresponding relationship
      operationId: getRelationshipUsingGET
      parameters:
        - name: relationshipId
          in: path
          description: UserBinding's unique identifier
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RelationshipResult'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
    delete:
      tags:
        - Persons
      summary: Gets the corresponding relationship
      description: Gets the corresponding relationship
      operationId: deleteRelationshipUsingDELETE
      parameters:
        - name: relationshipId
          in: path
          description: UserBinding's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: Relationship deleted
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /relationships/{relationshipId}/activate:
    post:
      tags:
        - Persons
      summary: Activate the relationship
      description: Activate the relationship
      operationId: activateRelationshipUsingPOST
      parameters:
        - name: relationshipId
          in: path
          description: UserBinding's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
  /relationships/{relationshipId}/suspend:
    post:
      tags:
        - Persons
      summary: Suspend the relationship
      description: Suspend the relationship
      operationId: suspendRelationshipUsingPOST
      parameters:
        - name: relationshipId
          in: path
          description: UserBinding's unique identifier
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - bearerAuth:
            - global
components:
  schemas:
    AttributesRequest:
      title: AttributesRequest
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        origin:
          type: string
    AttributesResponse:
      title: AttributesResponse
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        origin:
          type: string
    Billing:
      title: Billing
      type: object
      properties:
        publicServices:
          type: boolean
        recipientCode:
          type: string
        vatNumber:
          type: string
    BillingRequest:
      title: BillingRequest
      type: object
      properties:
        publicServices:
          type: boolean
        recipientCode:
          type: string
        vatNumber:
          type: string
    BillingResponse:
      title: BillingResponse
      type: object
      properties:
        publicServices:
          type: boolean
        recipientCode:
          type: string
        vatNumber:
          type: string
    ContractRequest:
      title: ContractRequest
      type: object
      properties:
        path:
          type: string
        version:
          type: string
    DataProtectionOfficer:
      title: DataProtectionOfficer
      type: object
      properties:
        address:
          type: string
        email:
          type: string
        pec:
          type: string
    DataProtectionOfficerRequest:
      title: DataProtectionOfficerRequest
      type: object
      properties:
        address:
          type: string
        email:
          type: string
        pec:
          type: string
    DataProtectionOfficerResponse:
      title: DataProtectionOfficerResponse
      type: object
      properties:
        address:
          type: string
        email:
          type: string
        pec:
          type: string
    GeoTaxonomies:
      title: GeoTaxonomies
      type: object
      properties:
        code:
          type: string
        desc:
          type: string
    GeographicTaxonomies:
      title: GeographicTaxonomies
      type: object
      properties:
        code:
          type: string
          pattern: \d{1,6}
          example: '058091'
          description: Code of the geographic taxonomy
        desc:
          type: string
          example: Roma - Comune
          description: Description of the geographic taxonomy code
        region:
          type: string
          pattern: \d{2}
          example: '12'
          description: Region taxonomy code to which belong the current geographic taxonomy
        province:
          type: string
          pattern: \d{3}
          example: '058'
          description: Province taxonomy code to which belong the current geographic taxonomy
        provinceAbbreviation:
          type: string
          pattern: '[A-Z]{2}'
          example: RM
          description: Abbreviation of the province to which belong the current geographic taxonomy
        country:
          type: string
          pattern: \d{3}
          example: '100'
          description: Country taxonomy code to which belong the current geographic taxonomy
        countryAbbreviation:
          type: string
          pattern: '[A-Z]{2}'
          example: IT
          description: Country
        startDate:
          type: string
          format: date
          example: '1871-01-15'
          description: Start date of the geographic taxonomy code
        endDate:
          type: string
          format: date
          description: End date of the geographic taxonomy code
        enable:
          type: boolean
          description: If the current code is enabled
    InstitutionBillingResponse:
      title: InstitutionBillingResponse
      type: object
      properties:
        address:
          type: string
        billing:
          $ref: '#/components/schemas/BillingResponse'
        description:
          type: string
        digitalAddress:
          type: string
        externalId:
          type: string
        institutionId:
          type: string
          format: uuid
        institutionType:
          $ref: '#/components/schemas/InstitutionType'
        originId:
          type: string
        pricingPlan:
          type: string
        taxCode:
          type: string
        zipCode:
          type: string
    InstitutionManagerResponse:
      title: InstitutionManagerResponse
      type: object
      properties:
        billing:
          $ref: '#/components/schemas/BillingResponse'
        institutionUpdate:
          $ref: '#/components/schemas/InstitutionUpdateResponse'
        product:
          $ref: '#/components/schemas/ProductInfo'
        id:
          type: string
          format: uuid
        from:
          type: string
          format: uuid
        to:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/PartyRole'
        state:
          $ref: '#/components/schemas/RelationshipState'
        pricingPlan:
          type: string
          description: pricing plan
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      additionalProperties: false
      required:
        - id
        - from
        - to
        - role
        - product
        - state
        - createdAt
    PartyRole:
      type: string
      description: Represents the generic available role types for the relationship
      enum:
        - MANAGER
        - DELEGATE
        - SUB_DELEGATE
        - OPERATOR
    RelationshipState:
      type: string
      description: Represents the party relationship state
      enum:
        - PENDING
        - ACTIVE
        - SUSPENDED
        - DELETED
        - REJECTED
        - TOBEVALIDATED
    InstitutionType:
      $ref: '#/components/schemas/InstitutionType'
    InstitutionProduct:
      title: InstitutionProduct
      type: object
      properties:
        id:
          type: string
        state:
          type: string
          enum:
            - ACTIVE
            - DELETED
            - PENDING
            - REJECTED
            - SUSPENDED
            - TOBEVALIDATED
    InstitutionPut:
      title: InstitutionPut
      type: object
      properties:
        geographicTaxonomyCodes:
          type: array
          items:
            type: string
    InstitutionRequest:
      title: InstitutionRequest
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributesRequest'
        dataProtectionOfficer:
          $ref: '#/components/schemas/DataProtectionOfficerRequest'
        geographicTaxonomies:
          type: array
          items:
            $ref: '#/components/schemas/GeoTaxonomies'
        paymentServiceProvider:
          $ref: '#/components/schemas/PaymentServiceProviderRequest'
        description:
          type: string
          example: AGENCY X
        digitalAddress:
          example: email@pec.mail.org
          format: email
          type: string
        address:
          example: via del campo
          type: string
        zipCode:
          example: 20100
          type: string
        taxCode:
          description: institution tax code
          type: string
        institutionType:
          $ref: '#/components/schemas/InstitutionType'
        rea:
          description: The institution REA
          type: string
        shareCapital:
          type: string
          description: The institution share capital value
          example: 10000
        businessRegisterPlace:
          type: string
          description: The business register place
          example: Rome
        supportEmail:
          type: string
          description: The support email contact
        supportPhone:
          type: string
          description: The support phone contact
      required:
        - description
        - digitalAddress
        - address
        - zipCode
        - taxCode
        - attributes
      additionalProperties: false
    InstitutionResponse:
      title: InstitutionResponse
      type: object
      properties:
        address:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributesResponse'
        businessRegisterPlace:
          type: string
        dataProtectionOfficer:
          $ref: '#/components/schemas/DataProtectionOfficerResponse'
        description:
          type: string
        digitalAddress:
          type: string
        externalId:
          type: string
        geographicTaxonomies:
          type: array
          items:
            $ref: '#/components/schemas/GeoTaxonomies'
        id:
          type: string
        imported:
          type: boolean
        institutionType:
          $ref: '#/components/schemas/InstitutionType'
        originId:
          type: string
        paymentServiceProvider:
          $ref: '#/components/schemas/PaymentServiceProviderResponse'
        rea:
          type: string
        shareCapital:
          type: string
        supportEmail:
          type: string
        supportPhone:
          type: string
        taxCode:
          type: string
        zipCode:
          type: string
    InstitutionUpdate:
      title: InstitutionUpdate
      type: object
      properties:
        address:
          type: string
        businessRegisterPlace:
          type: string
        dataProtectionOfficer:
          $ref: '#/components/schemas/DataProtectionOfficer'
        description:
          type: string
        digitalAddress:
          type: string
        geographicTaxonomyCodes:
          type: array
          items:
            type: string
        imported:
          type: boolean
        institutionType:
          $ref: '#/components/schemas/InstitutionType'
        paymentServiceProvider:
          $ref: '#/components/schemas/PaymentServiceProvider'
        rea:
          type: string
        shareCapital:
          type: string
        supportEmail:
          type: string
        supportPhone:
          type: string
        taxCode:
          type: string
        zipCode:
          type: string
    InstitutionUpdateResponse:
      title: InstitutionUpdateResponse
      type: object
      properties:
        address:
          type: string
        businessRegisterPlace:
          type: string
        dataProtectionOfficer:
          $ref: '#/components/schemas/DataProtectionOfficer'
        description:
          type: string
        digitalAddress:
          type: string
        geographicTaxonomyCodes:
          type: array
          items:
            type: string
        imported:
          type: boolean
        institutionType:
          $ref: '#/components/schemas/InstitutionType'
        paymentServiceProvider:
          $ref: '#/components/schemas/PaymentServiceProvider'
        rea:
          type: string
        shareCapital:
          type: string
        supportEmail:
          type: string
        supportPhone:
          type: string
        taxCode:
          type: string
        zipCode:
          type: string
    LegalsResponse:
      title: LegalsResponse
      type: object
      properties:
        env:
          type: string
          enum:
            - COLL
            - DEV
            - PROD
            - ROOT
        partyId:
          type: string
        relationshipId:
          type: string
        role:
          type: string
          enum:
            - DELEGATE
            - MANAGER
            - OPERATOR
            - SUB_DELEGATE
    OnboardedInstitutionResponse:
      title: OnboardedInstitutionResponse
      type: object
      properties:
        address:
          type: string
        attributes:
          type: array
          description: certified attributes bound to this institution
          items:
            $ref: '#/components/schemas/AttributesResponse'
        billing:
          $ref: '#/components/schemas/Billing'
        description:
          type: string
        digitalAddress:
          type: string
        externalId:
          type: string
        geographicTaxonomies:
          type: array
          items:
            $ref: '#/components/schemas/GeoTaxonomies'
        id:
          type: string
        institutionType:
          $ref: '#/components/schemas/InstitutionType'
        originId:
          type: string
        pricingPlan:
          type: string
        productInfo:
          $ref: '#/components/schemas/ProductInfo'
        role:
          $ref: '#/components/schemas/PartyRole'
        state:
          $ref: '#/components/schemas/RelationshipState'
        rea:
          description: The institution REA
          type: string
        shareCapital:
          type: string
          description: The institution share capital value
          example: 10000
        businessRegisterPlace:
          type: string
          description: The business register place
          example: Rome
        supportEmail:
          type: string
          description: The support email contact
        supportPhone:
          type: string
          description: The support phone contact
    OnboardedProducts:
      title: OnboardedProducts
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/InstitutionProduct'
    OnboardingInfoResponse:
      title: OnboardingInfoResponse
      type: object
      properties:
        institutions:
          type: array
          items:
            $ref: '#/components/schemas/OnboardedInstitutionResponse'
        userId:
          type: string
          description: User internal id
          format: uuid
    OnboardingInstitutionLegalsRequest:
      title: OnboardingInstitutionLegalsRequest
      type: object
      properties:
        contract:
          $ref: '#/components/schemas/ContractRequest'
        institutionExternalId:
          type: string
        institutionId:
          type: string
        productId:
          type: string
        productName:
          type: string
        signContract:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    OnboardingInstitutionOperatorsRequest:
      title: OnboardingInstitutionOperatorsRequest
      type: object
      properties:
        institutionId:
          type: string
        productId:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    OnboardingInstitutionRequest:
      title: OnboardingInstitutionRequest
      type: object
      properties:
        billing:
          $ref: '#/components/schemas/BillingRequest'
        contract:
          $ref: '#/components/schemas/ContractRequest'
        institutionExternalId:
          type: string
        institutionUpdate:
          $ref: '#/components/schemas/InstitutionUpdate'
        pricingPlan:
          type: string
        productId:
          type: string
        productName:
          type: string
        signContract:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    PaymentServiceProvider:
      title: PaymentServiceProvider
      type: object
      properties:
        abiCode:
          type: string
        businessRegisterNumber:
          type: string
        legalRegisterName:
          type: string
        legalRegisterNumber:
          type: string
        vatNumberGroup:
          type: boolean
    PaymentServiceProviderRequest:
      title: PaymentServiceProviderRequest
      type: object
      properties:
        abiCode:
          type: string
        businessRegisterNumber:
          type: string
        legalRegisterName:
          type: string
        legalRegisterNumber:
          type: string
        vatNumberGroup:
          type: boolean
    PaymentServiceProviderResponse:
      title: PaymentServiceProviderResponse
      type: object
      properties:
        abiCode:
          type: string
        businessRegisterNumber:
          type: string
        legalRegisterName:
          type: string
        legalRegisterNumber:
          type: string
        vatNumberGroup:
          type: boolean
    Person:
      title: Person
      type: object
      properties:
        email:
          type: string
        env:
          type: string
          enum:
            - COLL
            - DEV
            - PROD
            - ROOT
        id:
          type: string
        name:
          type: string
        productRole:
          type: array
          items:
            type: string
        role:
          type: string
          enum:
            - DELEGATE
            - MANAGER
            - OPERATOR
            - SUB_DELEGATE
        surname:
          type: string
        taxCode:
          type: string
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{3}-[0-9]{4}$'
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
      required:
        - code
        - detail
    ProductInfo:
      title: ProductInfo
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        id:
          type: string
        roles:
          type: array
          items:
            type: string
    RelationshipResult:
      title: RelationshipResult
      type: object
      properties:
        id:
          type: string
          format: uuid
        from:
          type: string
          format: uuid
        to:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/PartyRole'
        state:
          $ref: '#/components/schemas/RelationshipState'
        pricingPlan:
          type: string
          description: pricing plan
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        billing:
          $ref: '#/components/schemas/BillingResponse'
        institutionUpdate:
          $ref: '#/components/schemas/InstitutionUpdateResponse'
        product:
          $ref: '#/components/schemas/ProductInfo'
      additionalProperties: false
      required:
        - id
        - from
        - to
        - role
        - product
        - state
        - createdAt
    TokenIdResponse:
      title: TokenResponse
      type: object
      properties:
        id:
          type: string
          format: uuid
    TokenResponse:
      title: TokenResponse
      type: object
      properties:
        id:
          type: string
          format: uuid
        checksum:
          type: string
        legals:
          type: array
          items:
            $ref: '#/components/schemas/LegalsResponse'
  securitySchemes:
    bearerAuth:
      type: http
      description: A bearer token in the format of a JWS and conformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725)
      scheme: bearer
      bearerFormat: JWT
